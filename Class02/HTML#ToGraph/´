require 'rubygems'
require 'sinatra'
require 'haml'
require 'open-uri'
require 'nokogiri'
 

def node_id(node)
  return "body | " if node.name == "body"
  id  = node_id(node.parent) + "=>" + node.name
  id += "#" + node[:id] if node[:id] 
  id += "#" + node[:class] if node[:class] 
  id + " | "
end

def generate(parent_node, level=0)
  h = {}
  h[node_id(parent_node)] = []
  return h unless parent_node[:id] or parent_node[:class]
  parent_node.children.each do |child_node|
    h[node_id(parent_node)] << node_id(child_node)
    h.merge! generate(child_node)
  end
  h
end

get '/' do
  erb :index
end

post '/' do
  url = "http://www.nemum.com/" or params[:link]
  page = Nokogiri::HTML(open(url))
  if page
    @ids   = {}
    @nodes = generate page.xpath('//body').first
    @nodes.keys.each_with_index { | node_key, i | @ids[node_key] = i }
  end
  erb :resultado
end

__END__

@@ layout
<html lang='en' xml:lang='en' xmlns='http://www.w3.org/1999/xhtml'>
  <head>
    <title>HTML to Tree Graph</title>
    <meta content='text/html; charset=utf-8' http-equiv='Content-Type' />
    <style type='text/css'>
      body { background-color: #679; color: #222; text-align: left; font-family: arial, sans-serif; font-size: 62.5%; }
      body > p {  text-align:center; }
      h1 { color: #f00; margin-bottom: 1em; font-size: 1.5em; }
      <!-- #wrapper { width: 400px; margin: 50px auto 25px auto; background-color: #fff; border: 1px solid #666; } -->
      <!-- #wrapper { padding: 0 1em; font-size: 1.2em; } -->
    </style>
    <script src='/js/raphael-min.js' type='text/javascript'></script>
    <script src='/js/dracula_graffle.js' type='text/javascript'></script>
    <script src='/js/jquery-1.4.2.min.js' type='text/javascript'></script>
    <script src='/js/dracula_graph.js' type='text/javascript'></script>
  </head>
  <body>
    <div id='wrapper'>
      <h1>HTML to Tree Graph</h1>
      <form action='/' method='POST'>
        <p>
          <input name='link' />
          <input class='submit' type='submit' value='Do the Magic' />
        </p>
      </form>
      <div id='content'>
        <%= yield %>
      </div>
    </div>
    <p>
      <span xmlns:dc="http://purl.org/dc/elements/1.1/" href="http://purl.org/dc/dcmitype/InteractiveResource" property="dc:title" rel="dc:type">Calculadora</span> 
      by <a xmlns:cc="http://creativecommons.org/ns#" href="http://regedor.com/" property="cc:attributionName" rel="cc:attributionURL">Miguel Regedor</a>
      is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/2.5/pt/">Creative Commons Attribution-Share Alike 2.5 Portugal License</a>.
      <br />Based on a work at <a xmlns:dc="http://purl.org/dc/elements/1.1/" href="http://github.com/regedor/Sinatra--Calculadora" rel="dc:source">github.com</a>.
    </p>
  </body>
</html>

@@ index
<p>Cena brutzz!</p>
<p>Feita a pedido do querido Voda!</p>


@@ resultado
<div id="canvas"></div>
<button id="redraw" onclick="redraw();">redraw</button>
<script>
  var redraw, g, renderer;
  window.onload = function() {
    var width = $(document).width() - 20;
    var height = $(document).height() - 60;
    g = new Graph();
  
 
 //   <% @nodes.each do | node_key, children | %>
 //     g.addNode("<%= @ids[node_key] %>", { 
 //       label : "<%= node_key.split(" | ").last %>", 
 //       shapes : [ {
 //         type: "rect",
 //         x: 40,
 // //        y: 10,
 // //        width: 25,
 // //        height: 25,
 // //        stroke: "#f00"
 // //       },{
 // //        type: "text",
 // //        x: 30,
 // //        y: 40,
 // //        text: "Dump"
 //       }]
 //     });
 //   <% end %>

 
//    <% @nodes.each do | node_key, children | %>
//      <% children.each do | child | %>
//        g.addEdge("<%= @ids[node_key] %>", "<%= @ids[child] %>", { directed : true } );
//      <% end %>
//    <% end %>



  
  var render = function(r, n) {
      var label = r.text(0, 30, n.label).attr({opacity:0});
      /* the Raphael set is obligatory, containing all you want to display */
      var set = r.set().push(
          r.rect(-30, -13, 62, 86).attr({"fill": "#fa8", "stroke-width": 2, r : "9px"}))
          .push(label);

      /* make the label show only on hover */
      set.hover(function(){ label.animate({opacity:1,"fill-opacity":1}, 500); }, function(){ label.animate({opacity:0},300); });
      tooltip = r.set().push(
        r.rect(0, 0, 90, 30).attr({"fill": "#fec", "stroke-width": 1, r : "9px"})
      ).push(
        r.text(25, 15, "overlay").attr({"fill": "#000000"})
      );
      for(i in set.items) {
          set.items[i].tooltip(tooltip);
      };
      return set;
  };
  g.addNode("id35", {
      label : "meat\nand\ngreed" ,
      render : render
  });

      g.addNode("Wheatdd")
      g.addNode("Wheat", {
          shapes : [ {
                  type: "rect",
                  x: 40,
                  y: 10,
                  width: 25,
                  height: 25,
                  stroke: "#f00"
    //          }, {
    //              type: "text",
    //              x: 30,
    //              y: 40,
    //              text: "Dump"
              }],
          overlay : "<b>Hello <a href=\"http://wikipedia.org/\">World!</a></b>"
      });
 
  
  
  // layout the graph using the Spring layout implementation 
  var layouter = new Graph.Layout.Spring(g);
  
  // draw the graph using the RaphaelJS draw implementation 
  renderer = new Graph.Renderer.Raphael('canvas', g, width, height);
  
  redraw = function() {
    layouter.layout();
    renderer.draw();
  };
  hide = function(id) { g.nodes[id].hide(); };
  show = function(id) { g.nodes[id].show(); };
};

</script>
